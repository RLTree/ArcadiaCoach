Metadata-Version: 2.4
Name: arcadia-backend
Version: 0.1.0
Summary: Backend services for Arcadia Coach (ChatKit session token generation and utilities).
Author: Arcadia Coach
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: fastapi>=0.115.0
Requires-Dist: uvicorn[standard]>=0.30.0
Requires-Dist: pydantic>=2.7.0
Requires-Dist: pydantic-settings>=2.2.0
Requires-Dist: python-dotenv>=1.0.1
Requires-Dist: httpx>=0.27.0
Requires-Dist: openai>=1.40.0
Requires-Dist: openai-chatkit>=0.0.4
Requires-Dist: openai-guardrails>=0.1.0

# Arcadia Coach Backend

This FastAPI service hosts Arcadia Coach’s custom ChatKit integration. It mounts the ChatKit Python SDK server that hands conversations to the OpenAI Agents SDK agent, and it exposes helper endpoints (file upload, health checks) that the macOS client calls.

## Features

- `POST /chatkit` streams ChatKit turns through the Arcadia Coach agent graph.
- `POST /api/chatkit/upload` handles file uploads from the ChatKit widget and forwards file metadata to the agent.
- `GET /healthz` lightweight health probe for load balancers and uptime monitors.

## Requirements

- Python 3.10+
- An OpenAI API key (stored in `OPENAI_API_KEY`) so the server can call the OpenAI Responses API.

## Setup

```bash
cd backend
python -m venv .venv
source .venv/bin/activate
pip install -e .
```

Fill in an `.env` file (or export values in your shell):

```
OPENAI_API_KEY=sk-...
# Hosted MCP defaults to the local FastMCP service at http://127.0.0.1:8001/mcp.
# Override these if you host the widget tools elsewhere.
ARCADIA_MCP_URL=http://127.0.0.1:8001/mcp
ARCADIA_MCP_LABEL=Arcadia_Coach_Widgets
ARCADIA_MCP_REQUIRE_APPROVAL=never
```

> The service reads configuration from environment variables at startup. Use your favourite secret manager for production deployments.

## Run the service

```bash
uvicorn app.main:app --reload
```

Set the macOS app’s “ChatKit backend URL” to `http://localhost:8000` (or the address where your server is reachable).

### Run the widget MCP server

Arcadia Coach expects a hosted MCP server that serves lesson, quiz, milestone, and focus sprint widgets—this repository ships one under `mcp_server/`. Start it alongside the backend:

```bash
uv run python -m mcp_server.server
```

By default the backend points at `http://127.0.0.1:8001/mcp` (see `ARCADIA_MCP_URL`). If you host the MCP service elsewhere (for example on a public domain for ChatKit), update the environment variables accordingly.

### Deploy to Render

The repository ships a [`render.yaml`](../render.yaml) blueprint that spins up two Render services:

- **arcadia-coach-backend** – the ChatKit Python SDK + Agents SDK bridge (FastAPI).
- **arcadia-coach-mcp** – the MCP widget server that streams cards/lists/stat rows.

Steps:

1. Commit your changes and push to a Git repository that Render can access.
2. In Render, choose **Blueprint Deploy**, point it at `render.yaml`, and supply the required environment variables when prompted. `OPENAI_API_KEY` must be set on the backend service.
3. After the MCP service deploys, copy its public URL (for example `https://arcadia-coach-mcp.onrender.com/mcp`) and, if the hostname differs from the default in `render.yaml`, update the `ARCADIA_MCP_URL` environment variable on the backend service.
4. Add both service domains to your ChatKit domain allowlist and use the returned domain key inside the macOS Settings panel if required.

Once deployed, point the macOS app’s ChatKit backend URL at the Render backend domain (e.g. `https://arcadia-coach-backend.onrender.com`).

## Docker (optional)

A simple container image can be built with:

```bash
docker build -t arcadia-chatkit-backend .
```

Then run with:

```bash
docker run -p 8000:8000 \
  -e OPENAI_API_KEY=sk-... \
  -e ARCADIA_MCP_URL=http://127.0.0.1:8001/mcp \
  -e ARCADIA_MCP_LABEL=Arcadia_Coach_Widgets \
  -e ARCADIA_MCP_REQUIRE_APPROVAL=never \
  arcadia-chatkit-backend
```

## Endpoints

| Method | Path                     | Description                                                 |
|--------|--------------------------|-------------------------------------------------------------|
| POST   | `/chatkit`               | Stream ChatKit turns through the Arcadia Coach agent.       |
| POST   | `/api/chatkit/upload`    | Accept file uploads from the ChatKit widget.                |
| GET    | `/healthz`               | Health probe.                                               |

## Testing

Use `httpie` or `curl` to sanity-check the API:

```bash
http :8000/healthz
```

You should see `{"status": "ok", "mode": "custom-chatkit"}`. The macOS client calls `/chatkit` directly once you configure the backend URL in Settings.
